<?php if(!defined("CORE_FOLDER")) die("Hacking attempt logged from IP " . $_SERVER['REMOTE_ADDR']);
/**
 *	Session Library
 *	
 *	Everything you'll need to work with a server-side session. If this library is not working verify you are following this rule: The BASE_URL must be set to an actual URL prefix and not left blank. BASE_URL cannot end in a slash.
 *	
 *	phpGenesis by Jamon Holmgren and Tim Santeford
 *	
 *	@todo Document this library
 * @package phpGenesis
 */

// session_library last edited 12/11/2009 by Jamon Holmgren
// TO-DO
//	add function_exists()
/*
    Reasons Why the session libray may not work: 
		
*/
	load_library("cookie");
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_ini")) {
		function session_ini() {
			if(globals("session", "init")) return TRUE; // already initialized
			globals("session", "init", TRUE);
			if(settings("session", "method") == "db") {
			} else {
				if(settings('session', 'name') === NULL) die("Session can't start. The config doesn't contain session settings.");
				// Establish Secure Session Settings
				ini_set('session.gc_maxlifetime', settings('session', 'timeout'));
				if (setting_isset('session', 'save_path')) { 
					// Make sure session path exists
					if (!is_dir(settings('session', 'save_path'))) { mkdir(settings('session', 'save_path'), 0777); }
					ini_set('session.save_path', settings('session', 'save_path')); 
				}
				ini_set('session.use_cookies', 1);
				ini_set('session.use_only_cookies', 1); // Dissallow session ids in the POST or GET
				ini_set('session.cookie_httponly', 1); 
				$uri = (isset($_SERVER['SCRIPT_URI'])) ? $_SERVER['SCRIPT_URI'] : '';
				if ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') || (strpos($uri, 'https://') !== false)) {
					ini_set('session.cookie_secure', 1);	$secure_cookie = true;
				}
				session_set_cookie_params(time() + settings('session', 'timeout'), settings('cookie', 'path'), settings('cookie', 'domain'));
				session_name(settings('session', 'name'));
			}
			// Start Session
			session_safe_start();
			//mnsetcookie(session_name(), session_id(), time() + settings('session', 'timeout'), settings('cookie', 'path'), settings('cookie', 'domain'), t, true);	
			
			/** Session Security **/
			// The session was not generated by this application
			if(!session_isset('SESSION_KEY') || session('SESSION_KEY') != session_key()) { 
				session_regenerate();
			} elseif (time() - session('SESSION_LAST_ACCESS') > settings('session', 'timeout')) { 
				// Check for session timeout
				session_regenerate();
			} elseif (isset($_SERVER['HTTP_REFERER']) && strpos($_SERVER['HTTP_REFERER'], BASE_URL) !== 0) { 
				// Referer was not from the site
				// Check allowed referrers set in config
				if(!in_array(domain_name($_SERVER['HTTP_REFERER']), (array)settings("session", "allowed_referrers"))) {
					session_regenerate();
				}
			}		
			session('SESSION_LAST_ACCESS', time());
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_safe_start")) {
		function session_safe_start() {
			if(settings("session", "method") == "db") {
				$GLOBALS['session'] = Session::init();
				if(!is_object($GLOBALS['session'])) die("Couldn't start db session. session_library line " . __LINE__);
			} else {
				$ok = @session_start();
				
				if(!$ok) {
					session_regenerate_id(true); // replace the Session ID
					session_start(); // restart the session (since previous start failed)
				}
			}
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_array")) {
		function session_array() {
			if(settings("session", "method") == "db") {
				if(is_object($GLOBALS['session'])) return $GLOBALS['session']->get_all();
			} else {
				return $_SESSION;
			}
			return array();
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_regenerate")) {
		function session_regenerate($keep_values = false) { 
			if($keep_values === false) {
				session_delete();
				if(settings("session", "method") != "db") session_name(settings('session', 'name'));
				session_safe_start();
			}
			session('SESSION_KEY', session_key());
			session('SESSION_LAST_ACCESS', time()); 
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_cookie")) {
		function session_cookie($force_new = FALSE) {
			if(!$force_new && cookie_isset(settings("session", "name")) && cookie(settings("session", "name"))) {
				return cookie(settings("session", "name"));
			} else {
				// Need a new one.
				$key = uuid();
				cookie(settings("session", "name"), $key, 1); // session cookie will last 1 day I guess.
			}
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_key")) {
		function session_key() {
			return md5(APP_ID . $_SERVER['REMOTE_ADDR'] . $_SERVER['HTTP_USER_AGENT']);
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_end")) {
		function session_end() {
			session_delete();
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_delete")) {
		function session_delete() {
			if(settings("session", "method") == "db") {
				cookie(settings("session", "name"), '', -1);	
				$GLOBALS['session']->destroy();
			} else {
				$_SESSION = array(); 
				session_destroy();
			}
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session")) {
		function session($setting, $value = NULL) {
			if($value === NULL) {
				if(session_isset($setting)) {
					if(settings("session", "method") == "db") {
						return $GLOBALS['session']->get($setting);
					} else {
						return $_SESSION[$setting];
					}
				}
			} else {
				if(settings("session", "method") == "db") {
					$GLOBALS['session']->set($setting, $value);
				} else {
					$_SESSION[$setting] = $value;
					// session_write_close(); // To prevent locking.
				}
			}
			return NULL; // not set
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_isset")) {
		function session_isset($setting) {
			if(settings("session", "method") == "db") {
				if($GLOBALS['session']->get($setting) !== NULL) return TRUE;
				return FALSE;
			} else {
				if(isset($_SESSION[$setting])) return true;
				return FALSE;
			}
		}
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("unset_session")) {
		function unset_session($setting) {
			if(settings("session", "method") == "db") {
				$GLOBALS['session']->unset_field($setting);
			} else {
				unset($_SESSION[$setting]);
			}
			// session_write_close();
		}
	}
	
	/**
	 *	
	 *	
	 *	
	 */
	if(settings("session", "method") == "db" && !class_exists("Session")) {
		/******************************************* Session class *********************************************/
		/**
		 *	session table create:
		 
			CREATE TABLE `sessions` (
				`cookie`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,
					`security_key`  varchar(512) NULL ,
					`json`  text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,
					`created_at`  timestamp NULL ,
					`updated_at`  timestamp NULL ON UPDATE CURRENT_TIMESTAMP ,
					PRIMARY KEY (`cookie`)
				)
				ENGINE=InnoDB
				DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci
				ROW_FORMAT=COMPACT;
			
		 *	
		**/
		
		class Session extends phpGenesisModel {
			private static $instance;
			private $data;
			private $needs_write;
			
			function init() {
				try {
					$session = self::find_by_cookie(session_cookie());
					if(!$session) {
						$class = __CLASS__;
						$session = new $class();
						$session->cookie = session_cookie();
						$session->security_key = session_key();
						$session->set('SESSION_KEY', session_key());
					}
					$session->data = json_decode($session->json, TRUE);
					$session->set('SESSION_LAST_ACCESS', time());
				} catch(Exception $e) {
					die(_line());
					die("Database session library not loading. Check to make sure the table exists and the database connection works.");
				}
				return $session;
			}
			
			public function destroy() {
				$this->delete();
			}
			
			public function get($field) {
				if(isset($this->data[$field])) return $this->data[$field];
				return NULL;
			}
			
			public function get_all() {
				return $this->data;
			}
			
			public function set($field, $value) {
				$this->needs_write = TRUE;
				$this->data[$field] = $value;
			}
			public function unset_field($field) {
				unset($this->data[$field]);
			}
			
			public function cleanup() {
				if($this->needs_write || $this->is_new_record()) {
					$this->json = json_encode((array)$this->data);
					$this->security_key = session_key();
					if($this->save()) {
						// Anything else?
					}
				}
				self::query("
					DELETE FROM " . $this->table_name() . "
					WHERE updated_at < FROM_UNIXTIME(" . (time() - settings("session", "timeout")) . ")
				");
			}
		}
		/******************************************* End session class *****************************************/
	}
	
	/**
	 *
	 *
	 *
	 */
	if(!function_exists("session_cleanup")) {
		function session_cleanup() {
			if(settings("session", "method") == "db") {
				$GLOBALS['session']->cleanup();
			}
		}
		register_hook("before_shutdown", "session_cleanup");
		session_ini();
	}
	
?>